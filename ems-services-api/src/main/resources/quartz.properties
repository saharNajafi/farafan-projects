# Properties file for use by StdSchedulerFactory
# to create a Quartz Scheduler Instance.
#
# ===========================================================================
# Configure Main Scheduler Properties  ======================================
# ===========================================================================
#
	org.quartz.scheduler.instanceName = NOCR_SCHEDULER
    org.quartz.scheduler.instanceId = AUTO
    org.quartz.scheduler.rmi.export = false
    org.quartz.scheduler.rmi.proxy = false
    org.quartz.scheduler.skipUpdateCheck=true
	org.quartz.scheduler.wrapJobExecutionInUserTransaction = false
    org.quartz.scheduler.dbFailureRetryInterval = 10000
    org.quartz.scheduler.jmx.export = true
    #org.quartz.scheduler.jmx.objectName = quartz:type=QuartzScheduler,name=JmxScheduler,instanceId=NON_CLUSTERED
#    org.quartz.scheduler.classLoadHelper.class = CLASS_LOAD_HELPER_CLASS
#    org.quartz.context.key.SOME_KEY = SOME_VALUE
#
# "CLASS_LOAD_HELPER_CLASS" defaults to the most robust approach, which is to
# use the "org.quartz.simpl.CascadingClassLoadHelper" class - which in turn
# uses every other ClassLoadHelper class until one works.  You should probably
# not find the need to specify any other class for this property, though strange
# things seem to happen within application servers.  All of the current
# ClassLoadHelper implementation can be found in the "org.quartz.simpl" package.
#
# ===========================================================================
# Configure ThreadPool  =====================================================
# ===========================================================================
#
    org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
    org.quartz.threadPool.threadCount = 10
    org.quartz.threadPool.threadPriority = 5
	org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true
#
# ===========================================================================
# Configure JobStore  =======================================================
# ===========================================================================
#
#    org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore
	org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
    org.quartz.jobStore.misfireThreshold = 60000
	org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.weblogic.WebLogicOracleDelegate
	org.quartz.jobStore.useProperties = false
	org.quartz.jobStore.dataSource = myDS
	org.quartz.jobStore.tablePrefix = QRTZ_
	org.quartz.jobStore.isClustered = false
    ################################################################################################
    ###############todo: MAY NEED TO BE CHANGED FOR PRODUCTION #####################################
    ################################################################################################
    # Set the frequency (in milliseconds) at which this instance "checks-in" with the other instances of the cluster.
    # Affects the quickness of detecting failed instances. (Set to once a day)
    org.quartz.jobStore.clusterCheckinInterval = 86400000
    ################################################################################################
	org.quartz.jobStore.dontSetAutoCommitFalse = false
#
#     org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.<DriverDelegateClass>
#       Where DriverDelegateClass is one of:
#         - StdJDBCDelegate (for many JDBC-compliant drivers)
#         - MSSQLDelegate (for Microsoft SQL Server drivers)
#         - PostgreSQLDelegate (for PostgreSQL drivers)
#         - WebLogicDelegate (for WebLogic drivers)
#         - oracle.OracleDelegate (for Oracle drivers)
#
# ===========================================================================
# Configure Datasources  ====================================================
# ===========================================================================
#
# -- If your Scheduler is very busy (i.e. nearly always executing the same
#    number of jobs as the size of the thread pool, then you should probably
#    set the number of connections in the DataSource to be the size of the
#    thread pool + 1
#
#	org.quartz.dataSource.myDS.driver = oracle.jdbc.driver.OracleDriver
#	org.quartz.dataSource.myDS.URL = jdbc:oracle:thin:@198.100.101.19:1521:ORCL
#	org.quartz.dataSource.myDS.user = gam_ems
#	org.quartz.dataSource.myDS.password = ems
    org.quartz.dataSource.myDS.jndiURL = jdbc/GamNocrEmsOracleDS
	org.quartz.dataSource.myDS.maxConnections = 20
	
#	org.quartz.dataSource.myDS.jndiURL=jdbc/SchedulerDS
#	org.quartz.dataSource.myDS.jndiAlwaysLookup=false
#	org.quartz.dataSource.myDS.java.naming.factory.initial=weblogic.jndi.WLInitialContextFactory
#	org.quartz.dataSource.myDS.java.naming.provider.url=t3://localhost:7001
#	org.quartz.dataSource.myDS.java.naming.security.principal=weblogic
#	org.quartz.dataSource.myDS.java.naming.security.credentials=admin123
#
# ===========================================================================
# Configure SchedulerPlugins  ===============================================
# ===========================================================================
#
# The general pattern for defining a SchedulerPlugin is the following:
#
#     org.quartz.plugin.NAME.class = PLUGIN_CLASS_NAME
#
# If the plugin class has properties you want set via some "setter" methods
# on the class, name the properties and values as such
#
#     org.quartz.plugin.NAME.propName = propValue
#
# ...where "propName" corrisponds to a "setPropName" method on the plugin
# class.  Only primitive data type values (including Strings) are supported.
#
#
# Configure Plugins =========================================================
#
org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingTriggerHistoryPlugin
#org.quartz.plugin.triggHistory.triggerFiredMessage = Trigger {1}.{0} fired job {6}.{5} at: {4, date, HH:mm:ss MM/dd/yyyy}
#org.quartz.plugin.triggHistory.triggerCompleteMessage = Trigger {1}.{0} completed firing job {6}.{5} at {4, date, HH:mm:ss MM/dd/yyyy} with resulting trigger instruction code: {9}
#
org.quartz.plugin.jobInitializer.class: org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin
org.quartz.plugin.jobInitializer.fileNames = quartz_data.xml
#org.quartz.plugin.jobInitializer.overWriteExistingJobs = false
org.quartz.plugin.jobInitializer.failOnFileNotFound = true
#
#org.quartz.plugin.shutdownhook.class = org.quartz.plugins.management.ShutdownHookPlugin
#org.quartz.plugin.shutdownhook.cleanShutdown = true
#
# ===========================================================================
# Configure Listeners         ===============================================
# ===========================================================================
#
# The general pattern for defining a "Global" TriggerListener is:
#
#     org.quartz.triggerListener.NAME.class = TRIGGER_LISTENER_CLASS_NAME
#
# The general pattern for defining a "Global" JobListener is the following:
#
#     org.quartz.jobListener.NAME.class = JOB_LISTENER_CLASS_NAME
#
# "NAME" becomes the listener's name, and a "setName(String)" method is
# reflectively found and called on the class that is instantiated.
#
# If the listener class has properties you want set via some "setter" methods
# on the class, name the properties and values as such
#
#     org.quartz.triggerListener.NAME.propName = propValue
# or
#     org.quartz.jobListener.NAME.propName = propValue
#
# ...where "propName" corrisponds to a "setPropName" method on the listener
# class.  Only primitive data type values (including Strings) are supported.
#
#
# Configure Plugins =========================================================
#
#org.quartz.triggerListener.dummy.class = org.quartz.examples.DumbTriggerListener